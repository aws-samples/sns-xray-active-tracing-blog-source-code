# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Wild Rydes Asynchronous Messaging Workshop - Lab 2

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Runtime: python3.9
    Tags:
      project: wild-rydes
      workshop: asynchronous-messaging-workshop
      author: aws

Resources:
  SubmitRideCompletionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: unicorn-management-service/
      Handler: app.lambda_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref RidesTable
          TOPIC_ARN: !Ref RideCompletionTopic
          POWERTOOLS_SERVICE_NAME: SubmitRideCompletion
      Policies:
        - DynamoDBCrudPolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
            TableName: !Ref RidesTable
        - SNSPublishMessagePolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
            TopicName: !GetAtt RideCompletionTopic.TopicName
      Tracing: Active
      Events:
        WildRydes:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /submit-ride-completion
            Method: post
            RestApiId: !Ref SubmitRideCompletionApi

  SubmitRideCompletionApi:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: true
      StageName: Prod

  RidesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "Rides-${AWS::StackName}"
      PrimaryKey:
        Name: id
        Type: String

  RideCompletionTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: RideCompletionTopic
      TracingConfig: Active

  CustomerAccountingService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: generic-backend-microservice/
      Handler: app.lambda_handler
      ReservedConcurrentExecutions: 5
      Environment:
        Variables:
          SERVICE_NAME: CustomerAccountingService
          POWERTOOLS_SERVICE_NAME: CustomerAccountingService
      Policies:
        - SQSPollerPolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
            QueueName: !Ref CustomerAccountingServiceQueue
      Tracing: Active
      Events:
        CustomerAccountingServiceJobQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt CustomerAccountingServiceQueue.Arn
            BatchSize: 1

  CustomerNotificationService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: generic-backend-microservice/
      Handler: app.lambda_handler
      ReservedConcurrentExecutions: 5
      Environment:
        Variables:
          SERVICE_NAME: CustomerNotificationService
          POWERTOOLS_SERVICE_NAME: CustomerNotificationService
      Policies:
        - SQSPollerPolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
            QueueName: !Ref CustomerNotificationServiceQueue
      Tracing: Active
      Events:
        CustomerNotificationServiceJobQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt CustomerNotificationServiceQueue.Arn
            BatchSize: 1

  ExtraordinaryRidesService:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: generic-backend-microservice/
      Handler: app.lambda_handler
      ReservedConcurrentExecutions: 5
      Environment:
        Variables:
          SERVICE_NAME: ExtraordinaryRidesService
          POWERTOOLS_SERVICE_NAME: ExtraordinaryRidesService
      Policies:
        - SQSPollerPolicy: # https://github.com/awslabs/serverless-application-model/blob/develop/samtranslator/policy_templates_data/policy_templates.json
            QueueName: !Ref ExtraordinaryRidesServiceQueue
      Tracing: Active
      Events:
        ExtraordinaryRidesServiceJobQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt ExtraordinaryRidesServiceQueue.Arn
            BatchSize: 1

  CustomerAccountingServiceQueue:
    Type: AWS::SQS::Queue

  CustomerAccountingServiceQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref CustomerAccountingServiceQueue
      PolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action: sqs:SendMessage
          Resource: "*"
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref RideCompletionTopic

  CustomerAccountingServiceQueueToRidesTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt CustomerAccountingServiceQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
      TopicArn: !Ref RideCompletionTopic

  CustomerNotificationServiceQueue:
    Type: AWS::SQS::Queue

  CustomerNotificationServiceQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref CustomerNotificationServiceQueue
      PolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action: sqs:SendMessage
          Resource: "*"
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref RideCompletionTopic

  CustomerNotificationServiceQueueToRidesTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt CustomerNotificationServiceQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
      TopicArn: !Ref RideCompletionTopic

  ExtraordinaryRidesServiceQueue:
    Type: AWS::SQS::Queue

  ExtraordinaryRidesServiceQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ExtraordinaryRidesServiceQueue
      PolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action: sqs:SendMessage
          Resource: "*"
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref RideCompletionTopic

  ExtraordinaryRidesServiceQueueToRidesTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt ExtraordinaryRidesServiceQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
      TopicArn: !Ref RideCompletionTopic
      FilterPolicy:
        {
          "fare": [{ "numeric": [">=", 50] }],
          "distance": [{ "numeric": [">=", 20] }],
        }

  RidesDeliveryStreamToRidesTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt RidesDeliveryStream.Arn
      Protocol: firehose
      RawMessageDelivery: true
      TopicArn: !Ref RideCompletionTopic
      SubscriptionRoleArn: !GetAtt FirehoseSubscriptionRole.Arn

  RidesDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BufferingHints:
          IntervalInSeconds: 60
        BucketARN: !GetAtt RidesDeliveryArchiveBucket.Arn
        RoleARN: !GetAtt FirehoseDeliveryRole.Arn

  FirehoseDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref "AWS::AccountId"

  FirehoseDeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RidesFirehoseDeliveryPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
              - s3:PutObjectAcl
            Resource:
              - !GetAtt RidesDeliveryArchiveBucket.Arn
              - !Sub "${RidesDeliveryArchiveBucket.Arn}/*"
      Roles:
        - Ref: FirehoseDeliveryRole

  FirehoseSubscriptionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sts:AssumeRole

  FirehoseSubscriptionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RidesFirehoseDeliveryPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - firehose:DescribeDeliveryStream
              - firehose:ListDeliveryStreams
              - firehose:ListTagsForDeliveryStream
              - firehose:PutRecord
              - firehose:PutRecordBatch
            Resource:
              - !GetAtt RidesDeliveryStream.Arn
      Roles:
        - Ref: FirehoseSubscriptionRole

  RidesDeliveryArchiveBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  UnicornManagementServiceApiSubmitRideCompletionEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for SubmitRideCompletion function"
    Value: !Sub "https://${SubmitRideCompletionApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/submit-ride-completion/"

  SubmitRideCompletionFunction:
    Description: "SubmitRideCompletionFunction Lambda Function ARN"
    Value: !GetAtt SubmitRideCompletionFunction.Arn

  CustomerAccountingService:
    Description: "CustomerAccountingService Lambda Function ARN"
    Value: !GetAtt CustomerAccountingService.Arn

  CustomerNotificationService:
    Description: "CustomerNotificationService Lambda Function ARN"
    Value: !GetAtt CustomerNotificationService.Arn

  ExtraordinaryRidesService:
    Description: "ExtraordinaryRidesService Lambda Function ARN"
    Value: !GetAtt ExtraordinaryRidesService.Arn

  RidesTable:
    Description: "Rides table id"
    Value: !Ref RidesTable

  CustomerAccountingServiceQueue:
    Description: "Amazon SQS queue ARN for the CustomerAccounting service queue"
    Value: !Ref CustomerAccountingServiceQueue

  CustomerNotificationServiceQueue:
    Description: "Amazon SQS queue ARN for the CustomerNotification service queue"
    Value: !Ref CustomerNotificationServiceQueue

  ExtraordinaryRidesServiceQueue:
    Description: "Amazon SQS queue ARN for the ExtraordinaryRides service queue"
    Value: !Ref ExtraordinaryRidesServiceQueue

  RidesDeliveryStream:
    Description: "Amazon Kinesis Data Firehose delivery stream"
    Value: !GetAtt RidesDeliveryStream.Arn

  RidesDeliveryArchiveBucket:
    Description: "Amazon S3 bucket to archive messages"
    Value: !Ref RidesDeliveryArchiveBucket